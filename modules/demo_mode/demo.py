import enum

import aiogram
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from mathweek.loader import bot
import modules.message_design as ms_design
from modules.server.data.dataclasses import subject_labels
from modules.server.data.enums import Subjects, HandlerType, TaskStatus
from modules.server.requests_instance import task_con


class DemoCallbackData(enum.Enum):
    demo_calendar = "demo_calendar"
    demo_taskday = "demo_taskday"
    demo_subtaskday_math = "demo_subtaskday_math"
    demo_subtaskday_phys = "demo_subtaskday_phys"
    demo_subtaskday_it = "demo_subtaskday_it"


class DemoCalendar:
    demo_button = InlineKeyboardButton(text="üìÖ (–î–ï–ú–û) –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏—è",
                                       callback_data=DemoCallbackData.demo_calendar.value)

    @staticmethod
    async def _event_calendar(chat_id: int):

        last_answer = f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        text = f'üìÜ <b>–î–µ–º–æ–≤–µ—Ä—Å–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ–±—ã—Ç–∏—è</b>\n\n<blockquote>üìÜ <b>–ù–µ–¥–µ–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ 2024</b>: –î–ï–ú–û</blockquote>\n<blockquote>üïò <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç</b>:\n{last_answer}</blockquote>\n\n<i>–î–µ–º–æ–≤–µ—Ä—Å–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ–º, –≤ –∫–∞–∫–æ–º –≤–∏–¥–µ —É—á–µ–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤–æ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è.</i>\n\n<blockquote>‚ùó –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: —Å—Ç–∞—Ç—å—è, –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å—Ç–∞—Ç—å–µ, –¥–≤–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–º—É —Å—Ç–∞—Ç—å–∏. –î–µ–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.</blockquote>\n<blockquote>‚ùó –ó–∞ –≤–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –¥–µ–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±–∞–ª–ª—ã –Ω–µ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è. –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É</blockquote>'
        markup = InlineKeyboardMarkup(row_width=3)
        for day in range(1, 8):
            markup.insert(InlineKeyboardButton(text=f'Ô∏è–î–µ–Ω—å {day}',
                                               callback_data=DemoCallbackData.demo_taskday.value))

        await bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)

    @staticmethod
    async def on_button_click(data: DemoCallbackData, callback: aiogram.types.CallbackQuery, chat_id: int):
        if data == DemoCallbackData.demo_calendar:
            await callback.message.delete()
            await DemoCalendar._event_calendar(chat_id)
        elif data == DemoCallbackData.demo_taskday:
            markup = InlineKeyboardMarkup(row_width=3)
            markup.insert(InlineKeyboardButton(text='Ô∏è‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                                               callback_data=DemoCallbackData.demo_calendar.value))
            markup.insert(InlineKeyboardButton(text=f'Ô∏è{subject_labels["math"]}',
                                               callback_data=DemoCallbackData.demo_subtaskday_math.value))
            markup.insert(InlineKeyboardButton(text=f'Ô∏è{subject_labels["phys"]}',
                                               callback_data=DemoCallbackData.demo_subtaskday_phys.value))
            markup.insert(InlineKeyboardButton(text=f'Ô∏è{subject_labels["it"]}',
                                               callback_data=DemoCallbackData.demo_subtaskday_it.value))

            text = f"<b>üÜï –ú–∞—Ç–µ—Ä–∏–∞–ª (–î–ï–ú–û). –°–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</b>\n<i>–°–ª—É—á–∞–π–Ω—ã–π –∫–ª–∞—Å—Å</i>"
            await callback.message.edit_text(text=text, reply_markup=markup)
        elif data == DemoCallbackData.demo_subtaskday_math:
            sub = Subjects.MATH
            await callback.message.delete()
            material = await task_con.get_random_task(sub)
            md = ms_design.MessageDrawer(callback, HandlerType.CALLBACK)
            if material.result.status == 500:
                await md.server_error(material.result.status, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
                return
            article = material.json['article']
            quiz = material.json['quiz']
            tasks = material.json['task']
            day = article['day']
            if tasks[0]['text'].lower() == 'none' or tasks[1]['text'].lower() == 'none' or quiz[0][
                'text'].lower() == 'none' or article[
                'text'].lower() == 'none':
                await md.pic_error('system_images/not_found.png', "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
                return
            article_pattern = await ms_design.MessageDrawer.make_article(day, tasks[0]['topic'], article['text'])
            await bot.send_message(chat_id=callback.message.chat.id, text=article_pattern,
                                   reply_markup=(InlineKeyboardMarkup(row_width=1)
                                   .insert(
                                       InlineKeyboardButton(text='üëÅÔ∏è‚Äç –°–∫—Ä—ã—Ç—å', callback_data="clear"))))

            await md.quiz(quiz[0]['answers'], quiz[0]['text'])
            for task in tasks:
                topic = task['topic']
                task_type = task['type']
                level = task['difficultyLevel']
                task_text = task['text']
                content = task['content']

                task_str = await ms_design.MessageDrawer.make_task(topic, task_type, level, task_text,
                                                                   TaskStatus.UNTOUCHED, None)

                markup = InlineKeyboardMarkup(row_width=1)
                markup.insert(InlineKeyboardButton(text='üëÅÔ∏è‚Äç –°–∫—Ä—ã—Ç—å', callback_data="clear"))
                markup.insert(InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"taskdemoanswer_{task['id']}"))
                if content != "" and content is not None:
                    image = str(content).replace(" ", "")
                    try:
                        await bot.send_photo(callback.message.chat.id, photo=image, caption=task_str,
                                             reply_markup=markup)
                    except aiogram.utils.exceptions.BadRequest as e:
                        await md.error(str(e))
                else:
                    await bot.send_message(chat_id=callback.message.chat.id, text=task_str, reply_markup=markup)

        elif data == DemoCallbackData.demo_subtaskday_phys:
            sub = Subjects.PHYS
            await callback.message.delete()
            material = await task_con.get_random_task(sub)
            md = ms_design.MessageDrawer(callback, HandlerType.CALLBACK)
            if material.result.status == 500:
                await md.server_error(material.result.status, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
                return
            article = material.json['article']
            quiz = material.json['quiz']
            tasks = material.json['task']
            day = article['day']
            if tasks[0]['text'].lower() == 'none' or tasks[1]['text'].lower() == 'none' or quiz[0][
                'text'].lower() == 'none' or article[
                'text'].lower() == 'none':
                await md.pic_error('system_images/not_found.png', "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
                return
            article_pattern = await ms_design.MessageDrawer.make_article(day, tasks[0]['topic'], article['text'])
            await bot.send_message(chat_id=callback.message.chat.id, text=article_pattern,
                                   reply_markup=(InlineKeyboardMarkup(row_width=1)
                                   .insert(
                                       InlineKeyboardButton(text='üëÅÔ∏è‚Äç –°–∫—Ä—ã—Ç—å', callback_data="clear"))))

            await md.quiz(quiz[0]['answers'], quiz[0]['text'])
            for task in tasks:
                topic = task['topic']
                task_type = task['type']
                level = task['difficultyLevel']
                task_text = task['text']
                content = task['content']

                task_str = await ms_design.MessageDrawer.make_task(topic, task_type, level, task_text,
                                                                   TaskStatus.UNTOUCHED, None)

                markup = InlineKeyboardMarkup(row_width=1)
                markup.insert(InlineKeyboardButton(text='üëÅÔ∏è‚Äç –°–∫—Ä—ã—Ç—å', callback_data="clear"))
                markup.insert(InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"taskdemoanswer_{task['id']}"))
                if content != "" and content is not None:
                    image = str(content).replace(" ", "")
                    try:
                        await bot.send_photo(callback.message.chat.id, photo=image, caption=task_str,
                                             reply_markup=markup)
                    except aiogram.utils.exceptions.BadRequest as e:
                        await md.error(str(e))
                else:
                    await bot.send_message(chat_id=callback.message.chat.id, text=task_str, reply_markup=markup)
        elif data == DemoCallbackData.demo_subtaskday_it:
            sub = Subjects.IT
            await callback.message.delete()
            material = await task_con.get_random_task(sub)
            md = ms_design.MessageDrawer(callback, HandlerType.CALLBACK)
            if material.result.status == 500:
                await md.server_error(material.result.status, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
                return
            article = material.json['article']
            quiz = material.json['quiz']
            tasks = material.json['task']
            day = article['day']
            if tasks[0]['text'].lower() == 'none' or tasks[1]['text'].lower() == 'none' or quiz[0]['text'].lower() == 'none' or article[
                'text'].lower() == 'none':
                await md.pic_error('system_images/not_found.png', "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
                return
            article_pattern = await ms_design.MessageDrawer.make_article(day, tasks[0]['topic'], article['text'])
            await bot.send_message(chat_id=callback.message.chat.id, text=article_pattern,
                                   reply_markup=(InlineKeyboardMarkup(row_width=1)
                                   .insert(
                                       InlineKeyboardButton(text='üëÅÔ∏è‚Äç –°–∫—Ä—ã—Ç—å', callback_data="clear"))))

            await md.quiz(quiz[0]['answers'], quiz[0]['text'])
            for task in tasks:
                topic = task['topic']
                task_type = task['type']
                level = task['difficultyLevel']
                task_text = task['text']
                content = task['content']

                task_str = await ms_design.MessageDrawer.make_task(topic, task_type, level, task_text,
                                                                   TaskStatus.UNTOUCHED, None)

                markup = InlineKeyboardMarkup(row_width=1)
                markup.insert(InlineKeyboardButton(text='üëÅÔ∏è‚Äç –°–∫—Ä—ã—Ç—å', callback_data="clear"))
                markup.insert(InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"taskdemoanswer_{task['id']}"))
                if content != "" and content is not None:
                    image = str(content).replace(" ", "")
                    try:
                        await bot.send_photo(callback.message.chat.id, photo=image, caption=task_str,
                                             reply_markup=markup)
                    except aiogram.utils.exceptions.BadRequest as e:
                        await md.error(str(e))
                else:
                    await bot.send_message(chat_id=callback.message.chat.id, text=task_str, reply_markup=markup)
