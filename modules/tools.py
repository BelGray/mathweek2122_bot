import aiogram.types
from aiogram.types import InputFile
import aiogram.utils.markdown as fmt
import state_instance
from mathweek.bot_commands import BotCommandsEnum
from mathweek.buttons import RegButtonClient, TechSupportButtonClient
from mathweek.loader import bot
from modules.content_manager import ContentManager
from modules.date_manager import DateManager
from modules.server.data.enums import HandlerType, DayAvailability, TaskStatus
from modules.server.entity_controllers.student_controller import *
from mathweek.logger import log
from modules.server.requests_instance import student_con, task_con, student_answer_con


async def get_leaderboard_place(leaders: list, telegram_id: int) -> int:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤"""
    leaders = sorted(leaders, key=lambda user: user['points'], reverse=True)
    for student in leaders:
        if student['student']['telegramId'] == telegram_id:
            return leaders.index(student) + 1


async def check_calendar_day(day: int) -> DayAvailability:
    status = DayAvailability.UNAVAILABLE
    if DateManager.day() < day:
        status = DayAvailability.UNAVAILABLE
    elif DateManager.day() == day:
        status = DayAvailability.AVAILABLE
    elif DateManager.day() > day:
        status = DayAvailability.PASSED

    return status


def xor(operand_1: bool, operand_2: bool):
    return bool(operand_1) != bool(operand_2)


async def check_task_status(telegram_id: int, day: int, task_id: int) -> tuple[TaskStatus, str]:
    check_day = await check_calendar_day(day)

    answer = " - "
    status = TaskStatus.UNTOUCHED
    is_answered = (await student_answer_con.is_student_answer_to_task(telegram_id, task_id)).json
    if check_day == DayAvailability.AVAILABLE:
        if is_answered['isAnswered']:
            answer = is_answered['object']['studentAnswerText']
            status = TaskStatus.WAIT
        else:
            status = TaskStatus.UNTOUCHED
    if check_day == DayAvailability.PASSED:
        if is_answered['isAnswered']:
            answer = is_answered['object']['studentAnswerText']
            if is_answered['object']['correct']:
                status = TaskStatus.SOLVED
            else:
                status = TaskStatus.MISSED

    return status, answer


def commands_detector(command: BotCommandsEnum):
    def wrapper(call):
        async def inner(*args):
            message: aiogram.types.Message = args[0]
            log.i(commands_detector.__name__, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.from_user.id} ({message.from_user.username}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É {command.value}")
            await state_instance.state_manager.detect_command_call()
            await call(*args)
        return inner
    return wrapper

def check_user_registered(handler_type: HandlerType = HandlerType.MESSAGE):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""

    def wrap(call):
        async def wrapper(*args):
            mes: aiogram.types.Message = args[0]
            controller = student_con
            chat_id = handler_type(mes)
            result: ServerResponse = await controller.get_student(telegram_id=mes.from_user.id)
            ban = (await controller.get_student(mes.from_user.id)).json.get('ban', False)
            if ban:
                await bot.send_message(chat_id=chat_id,
                                       text="‚õî –¢–µ–±—è –æ—Ç—Å—Ç—Ä–∞–Ω–∏–ª–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞! –û–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞")
            elif result.result.status == 404:
                log.w(check_user_registered.__name__,
                      f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID {mes.from_user.id} –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (404)")
                with open('system_images/auth_required.png', 'rb') as image:
                    await bot.send_photo(chat_id=chat_id,
                                         caption='‚ùå –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —É—á–µ–Ω–∏–∫ —à–∫–æ–ª—ã ‚Ññ 2122.\n\n‚ö†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –æ—Ç—Å—Ç—Ä–∞–Ω–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏, –µ—Å–ª–∏ –±—É–¥—É—Ç —É–∫–∞–∑–∞–Ω—ã —Ñ–∞–ª—å—à–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!',
                                         photo=image,
                                         reply_markup=RegButtonClient
                                         )
            elif result.result.status == 200:
                log.s(check_user_registered.__name__,
                      f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {mes.from_user.id} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (200)')
                await call(*args)
            else:
                log.e(check_user_registered.__name__,
                      f"–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID {mes.from_user.id} —Å–µ—Ä–≤–µ—Ä –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É {result.result.status}")
                await bot.send_photo(chat_id=chat_id,
                                     caption=f'‚ùå –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: HTTP {result.result.status}.',
                                     photo=InputFile(ContentManager.make_server_error_image(result.result.status)),
                                     reply_markup=TechSupportButtonClient
                                     )

        return wrapper

    return wrap


async def register_new_student(message: aiogram.types.Message, student: Student) -> ServerResponse:
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    result: ServerResponse = await student_con.create_student(student)
    if result.result.status == 201:
        log.s(register_new_student.__name__,
              f"–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —É—á–µ–Ω–∏–∫ —Å Telegram ID {student.telegram_id}")
        await bot.send_message(chat_id=message.chat.id,
                               text=f'üóùÔ∏è –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(-–∞) –∫–∞–∫ <b>{fmt.quote_html(student.name)} {fmt.quote_html(student.lastname)} {student.class_number}{student.class_letter}</b>',
                               parse_mode='HTML')
    elif result.result.status == 400:
        log.e(register_new_student.__name__,
              f'–£—á–µ–Ω–∏–∫ {fmt.quote_html(student.name)} {fmt.quote_html(student.lastname)} {student.class_number}{student.class_letter} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
        with open('system_images/user_exists.png', 'rb') as image:
            await bot.send_photo(chat_id=message.chat.id,
                                 caption=f'‚ùå –£—á–µ–Ω–∏–∫ <b>{fmt.quote_html(student.name)} {fmt.quote_html(student.lastname)} {student.class_number}{student.class_letter} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.</b>',
                                 photo=image,
                                 parse_mode='HTML',
                                 reply_markup=TechSupportButtonClient
                                 )
    else:
        log.e(register_new_student.__name__,
              f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID {student.telegram_id}. HTTP —Å—Ç–∞—Ç—É—Å: {result.result.status}")
        await bot.send_photo(chat_id=message.chat.id,
                             caption=f'‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞. HTTP {result.result.status}',
                             photo=InputFile(ContentManager.make_server_error_image(result.result.status)),
                             reply_markup=TechSupportButtonClient
                             )

    return result
