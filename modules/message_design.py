import random

import aiogram.types
import aiohttp
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton

from mathweek.buttons import TechSupportButtonClient, DeleteAccountButtonClient, ShadowButtonClient
from mathweek.loader import bot
from mathweek.logger import log
from mathweek.message_text import points_system_text
from modules import tools
from modules.content_manager import ContentManager
from modules.date_manager import DateManager
from modules.server.data.dataclasses import student_class_subjects, ServerResponse, tasks_levels
from modules.server.data.enums import HandlerType, TaskTypes, TaskStatus
from modules.server.requests_instance import student_con, student_answer_con, lead_con
from modules.tools import get_leaderboard_place


# todo: –ù–∞–ø–∏—Å–∞—Ç—å –¥–∏–∑–∞–π–Ω —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ–±—ã—Ç–∏—è –≤ —Ü–µ–ª–æ–º

class MessageDrawer:
    """–ö–ª–∞—Å—Å —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ü–µ–ª–µ–π. –ù–µ –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, message: aiogram.types.Message, handler_type: HandlerType = HandlerType.MESSAGE):
        self.__message = message
        self.__chat_id = handler_type(self.__message)

    @property
    def message(self):
        return self.__message

    async def error(self, error_text: str):
        mes = f"‚ùå <b>–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!</b>\n<code>{error_text}</code>"
        await bot.send_message(chat_id=self.__chat_id, text=mes, reply_markup=TechSupportButtonClient)

    async def server_error(self, http_status: int, error_text: str = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: HTTP {0}.'):
        await bot.send_photo(chat_id=self.__chat_id,
                             caption=error_text.format(http_status),
                             photo=InputFile(ContentManager.make_server_error_image(http_status)),
                             reply_markup=TechSupportButtonClient
                             )

    async def pic_error(self, path: str, error_text: str):
        await bot.send_photo(chat_id=self.__chat_id,
                             caption=error_text,
                             photo=open(path, 'rb'),
                             reply_markup=TechSupportButtonClient
                             )

    async def event_calendar(self):
        text = f'üìÜ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏—è</b>\n\n<blockquote>üìÜ <b>–ù–µ–¥–µ–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ 2024</b>: {DateManager.days_text[DateManager.day()]}</blockquote>\n\n<i>–í—ã–ø–æ–ª–Ω—è–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π –±–∞–ª–ª—ã –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</i>\n\n{points_system_text}\n<blockquote>‚ùó –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: —Å—Ç–∞—Ç—å—è, –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å—Ç–∞—Ç—å–µ, –¥–≤–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–º—É —Å—Ç–∞—Ç—å–∏</blockquote>\n<blockquote>‚ùó –ó–∞–¥–∞–Ω–∏—è –¥–Ω—è –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å. –ù–∞ –≤–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –¥–∞–µ—Ç—Å—è <u>1 –ø–æ–ø—ã—Ç–∫–∞</u></blockquote>'
        markup = InlineKeyboardMarkup(row_width=3)
        for day in DateManager.event_days:
            markup.insert(InlineKeyboardButton(text=f'Ô∏è{(await tools.check_calendar_day(day)).value} {day} –º–∞—Ä—Ç–∞',
                                               callback_data=f"taskday_{day}"))

        await bot.send_message(chat_id=self.__chat_id, text=text, reply_markup=markup)

    @classmethod
    async def make_article(cls, day: int, label: str, text: str) -> str:
        text = f'üì∞ <b>{day} –º–∞—Ä—Ç–∞. –°—Ç–∞—Ç—å—è –Ω–∞ —Ç–µ–º—É "{label}"</b>\n\n<blockquote>{text}</blockquote>'
        return text

    async def quiz(self, variants_list: list, label: str):
        text = f'üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞. \n"{label}"'
        true_var = 0
        random.shuffle(variants_list)
        variants = []
        for i in range(len(variants_list)):
            variants.append(variants_list[i]['text'])
            if variants_list[i]['isCorrect']:
                true_var = i


        await bot.send_poll(self.__chat_id, text, variants, type='quiz', is_anonymous=False,
                            correct_option_id=true_var, reply_markup=ShadowButtonClient)

    @classmethod
    async def make_task(cls, topic: str, task_type: str, level: int, text: str, status: TaskStatus, answer: str = None) -> str:
        status_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–æ—à–∏–±–∫–∞)"
        if status == TaskStatus.MISSED:
            status_str = "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç"
        elif status == TaskStatus.SOLVED:
            status_str = "–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç"
        elif status == TaskStatus.UNTOUCHED:
            status_str = "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ —Ä–µ—à–µ–Ω–æ"
        elif status == TaskStatus.WAIT:
            status_str = '–û—Ç–≤–µ—Ç –¥–∞–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —É–∂–µ –∑–∞–≤—Ç—Ä–∞.'

        text = (
            f'üìå <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É "{topic}"</b>\n<i>{"–¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞" if task_type == TaskTypes.WORD_TASK.value else "–í—ã—Ä–∞–∂–µ–Ω–∏–µ"}.'
            f' {tasks_levels[level]["label"]}</i>\n\n<blockquote>{text}</blockquote>\n\nüéØ <b>–í–µ—Å –∑–∞–¥–∞–Ω–∏—è: {tasks_levels[level]["points"]}</b>'
            f'\n{status.value} <b>–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è: {status_str}</b>\nüí¨ <b>–û—Ç–≤–µ—Ç: {answer if answer is not None else " - "}</b>')

        return text

    @classmethod
    async def make_leaderboard(cls, leaders_list: list, students_count: int) -> str:
        leaders_str = ""
        for i in range(students_count if len(leaders_list) >= students_count else len(leaders_list)):
            student = leaders_list[i]

            name = student['student']['name']
            lastname = student['student']['lastName']
            telegram_id = student['student']['telegramId']
            class_number = student['student']['classNumber']
            class_letter = student['student']['classLetter']
            is_banned = student['student']['ban']

            points = student['points']

            username = f'<a href="tg://user?id={telegram_id}">{lastname} {name} {"üö´" if is_banned else ""}</a>'

            leaders_str += f"<b># {i + 1}</b> | {username} | {class_number}{class_letter} | <code>{points} {'–±–∞–ª–ª' if points % 10 == 1 else ('–±–∞–ª–ª–∞' if 1 < points % 10 < 5 else '–±–∞–ª–ª–æ–≤')}</code>\n"

        return leaders_str

    async def profile(self, telegram_id: int):
        student: ServerResponse = await student_con.get_student(telegram_id)
        student_data = student.json

        name = student_data['name']
        lastname = student_data['lastName']
        class_number = student_data['classNumber']
        class_letter = student_data['classLetter']

        answers_count = len((await student_answer_con.get_student_answers_by_telegram_id(telegram_id)).json)

        points_sum = (await student_con.get_student_points(telegram_id)).json['object']

        points_str = "üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:<blockquote>"
        for sub in student_class_subjects[class_number]:
            points_str += f"\n <i>{sub[1]}</i>: <code>{(await student_con.get_student_points_by_subject(telegram_id, sub[0])).json['object']}/38</code>"

        letter_leader_places_str = f"üîù –ú–µ—Å—Ç–æ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º —Å—Ä–µ–¥–∏ —É—á–µ–Ω–∏–∫–æ–≤ <b>{class_number}{class_letter}</b> –∫–ª–∞—Å—Å–∞:<blockquote>"
        for sub in student_class_subjects[class_number]:
            letter_leader_places_str += f"\n <i>{sub[1]}</i>: <code>{await get_leaderboard_place((await lead_con.get_leaderboard_by_subject_and_class_number_and_class_letter(sub[0], class_number, class_letter)).json, telegram_id)} –º–µ—Å—Ç–æ</code>"

        number_leader_places_str = f"üîù –ú–µ—Å—Ç–æ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º —Å—Ä–µ–¥–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏ <b>{class_number}</b> –∫–ª–∞—Å—Å–æ–≤:<blockquote>"
        for sub in student_class_subjects[class_number]:
            number_leader_places_str += f"\n <i>{sub[1]}</i>: <code>{await get_leaderboard_place((await lead_con.get_leaderboard_by_subject_and_class_number(sub[0], class_number)).json, telegram_id)} –º–µ—Å—Ç–æ</code>"

        text = f"üë§ <b>{lastname} {name} {class_number}{class_letter}</b>\n<blockquote>üìÜ <b>–ù–µ–¥–µ–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ 2024</b>: {DateManager.days_text[DateManager.day()]}</blockquote>\n\n{points_str}</blockquote>\n\nüí¨ –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è: <code>{answers_count}</code>\nüìå –ë–∞–ª–ª–æ–≤ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º: <code>{points_sum}</code>\n\n{letter_leader_places_str}</blockquote>\n\n{number_leader_places_str}</blockquote>"
        await bot.send_message(chat_id=self.__chat_id, text=text, parse_mode='HTML')
