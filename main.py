# -*- coding: utf-8 -*-
import asyncio
import atexit

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from mathweek.buttons import (RegButtonClient, TechSupportButtonClient, TasksSupportButtonClient,
                              StopRegLastnameButtonClient, StopRegNameButtonClient)
from modules.server.requests_instance import student_con
from mathweek.admin import Statuses, Admin
from mathweek.bot_commands import set_default_commands, BotCommandsEnum
from mathweek.loader import dp, state_manager, bot
from mathweek.logger import log
from modules.content_manager import ContentManager
from modules.tools import check_user_registered
from aiogram import types

from modules.user_dict import UserRegData, User
from modules.user_list import UserList

mode = Statuses.DEVELOPMENT

reg_users = UserList()
reg_users_data = UserRegData()


class RegName(StatesGroup):
    name = State()


class RegLastname(StatesGroup):
    lastname = State()


async def on_startup(dispatcher):
    log.s('on_startup', '–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API')
    await state_manager.state_control_loop()
    ContentManager.init_directory('content')
    await set_default_commands(dispatcher)


@dp.message_handler(commands=[BotCommandsEnum.START.value])
@Admin.bot_mode(mode, BotCommandsEnum.START)
@check_user_registered
async def start(message: types.Message):
    text = f"""üìê –ü—Ä–∏–≤–µ—Ç, —É—á–µ–Ω–∏–∫! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —Å–æ–±—ã—Ç–∏—é <b>¬´–ù–µ–¥–µ–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏¬ª</b> –≤ <i>–ì–ë–û–£ —à–∫–æ–ª–µ ‚Ññ2122 –∏–º–µ–Ω–∏ –û. –ê. –Æ—Ä–∞—Å–æ–≤–∞</i>.

ü§î <b>–ù–µ–¥–µ–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏</b> - —ç—Ç–æ –Ω–µ–¥–µ–ª—è, –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–π —É—á–µ–Ω–∏–∫–∏ <i>5-11</i> –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –∑–∞–¥–∞–Ω–∏—è –≤ –±–æ—Ç–µ, –∏–∑—É—á–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <b>–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞</b>.
<blockquote>–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /start</blockquote>

üìÖ <b>–ù–µ–¥–µ–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏</b> 2024: <code>04.03.2024 - 13.03.2024</code>
"""


@dp.callback_query_handler(text='reg')
async def reg_button_callback(message: types.Message):
    if reg_users.is_involved(message.from_user.id):
        return
    student = await student_con.get_student(message.from_user.id)
    if student.status == 200:
        with open('system_images/user_exists.png', 'rb') as image:
            await bot.send_photo(chat_id=message['message']['chat']['id'], caption="‚úÖ –¢—ã —É–∂–µ –∏ —Ç–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(-–∞)",
                                 photo=image)
        return

    await reg_users_data.set(message.from_user.id, User('', '', 0, ''))
    await reg_users.add(message.from_user.id)
    await bot.send_message(chat_id=message['message']['chat']['id'], text="üë§ –í–≤–µ–¥–∏ —Å–≤–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è: ",
                           reply_markup=StopRegNameButtonClient)
    await RegName.name.set()


@dp.message_handler(state=RegName.name)
async def process_reg_name(message: types.Message, state: FSMContext):
    if reg_users.is_involved(message.from_user.id) and reg_users_data.is_involved(message.from_user.id):
        await state.finish()
        name = message.text
        user: User = reg_users_data.get(message.from_user.id)
        user.name = name
        await bot.send_message(chat_id=message['chat']['id'], text="üë§ –í–≤–µ–¥–∏ —Å–≤–æ—é –Ω–∞—Å—Ç–æ—è—â—É—é —Ñ–∞–º–∏–ª–∏—é: ",
                               reply_markup=StopRegLastnameButtonClient)
        await RegLastname.lastname.set()


@dp.message_handler(state=RegLastname.lastname)
async def process_reg_lastname(message: types.Message, state: FSMContext):
    if reg_users.is_involved(message.from_user.id) and reg_users_data.is_involved(message.from_user.id):
        await state.finish()
        lastname = message.text
        user: User = reg_users_data.get(message.from_user.id)
        user.lastname = lastname
        markup = InlineKeyboardMarkup(row_width=1)
        for klass in range(5, 12):
            markup.insert(InlineKeyboardButton(text=f'{klass} –∫–ª–∞—Å—Å', callback_data="class_number"))
        await bot.send_message(chat_id=message['chat']['id'], text="üìö –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å: ",
                               reply_markup=markup)

        # todo: –î–æ–ø–∏—Å–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é


@dp.callback_query_handler(text='stop_reg_name', state=RegName.name)
async def stop_reg_name_button_callback(message: types.Message, state: FSMContext):
    if reg_users.is_involved(message.from_user.id) and reg_users_data.is_involved(message.from_user.id):
        await state.reset_state()
        await reg_users_data.remove(message.from_user.id)
        await reg_users.remove(message.from_user.id)
        cancel_message = await bot.send_message(chat_id=message['message']['chat']['id'],
                                                text="‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await bot.delete_message(chat_id=message['message']['chat']['id'], message_id=message['message']['message_id'])
        await asyncio.sleep(5)
        await cancel_message.delete()


@dp.callback_query_handler(text='stop_reg_lastname', state=RegLastname.lastname)
async def stop_reg_lastname_button_callback(message: types.Message, state: FSMContext):
    if reg_users.is_involved(message.from_user.id) and reg_users_data.is_involved(message.from_user.id):
        await state.reset_state()
        await reg_users_data.remove(message.from_user.id)
        await reg_users.remove(message.from_user.id)
        cancel_message = await bot.send_message(chat_id=message['message']['chat']['id'],
                                                text="‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await bot.delete_message(chat_id=message['message']['chat']['id'], message_id=message['message']['message_id'])
        await asyncio.sleep(5)
        await cancel_message.delete()


if __name__ == "__main__":
    from aiogram import executor, types

    executor.start_polling(dp, on_startup=on_startup)
